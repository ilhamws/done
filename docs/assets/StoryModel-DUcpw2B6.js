import{S as h,U as n,A as c}from"./index-DVtLjEjI.js";class y{constructor(){this.storyDatabase=new h}async getAllStories(){try{const t=n.getToken();if(!t)throw new Error("Authentication required");try{const r=await fetch(`${c}/stories`,{headers:{Authorization:`Bearer ${t}`}}),e=await r.json();if(!r.ok)throw new Error(e.message);const o=e.listStory||[];return await this.storyDatabase.saveStories(o),o}catch(r){console.log("Network error, fetching from IndexedDB",r);const e=await this.storyDatabase.getStories();if(e&&e.length>0)return e;throw new Error("Failed to fetch stories: No offline data available")}}catch(t){throw new Error("Failed to fetch stories: "+t.message)}}async getStoryById(t){try{const r=n.getToken();if(!r)throw new Error("Authentication required");try{const e=await fetch(`${c}/stories/${t}`,{headers:{Authorization:`Bearer ${r}`}}),o=await e.json();if(!e.ok)throw new Error(o.message);const a=o.story;return await this.storyDatabase.saveStories([a]),a}catch(e){console.log("Network error, fetching from IndexedDB",e);const o=await this.storyDatabase.getStoryById(t);if(o)return o;throw new Error("Failed to fetch story: No offline data available")}}catch(r){throw new Error("Failed to fetch story: "+r.message)}}async addStory(t){try{const r=n.getToken();if(!r)throw new Error("Authentication required");try{const e=await fetch(`${c}/stories`,{method:"POST",headers:{Authorization:`Bearer ${r}`},body:t}),o=await e.json();if(!e.ok)throw new Error(o.message);return o.story}catch(e){console.log("Network error, saving offline",e);const o={};return t.forEach((s,i)=>{i==="photo"?(o[i]=URL.createObjectURL(s),o.photoBlob=s):o[i]=s}),{...await this.storyDatabase.saveOfflineStory(o),isOffline:!0}}}catch(r){throw new Error("Failed to add story: "+r.message)}}async getFavoriteStories(){try{return await this.storyDatabase.getFavoriteStories()}catch(t){throw new Error("Failed to get favorite stories: "+t.message)}}async toggleFavorite(t){try{return await this.storyDatabase.isStoryFavorite(t.id)?(await this.storyDatabase.removeFavoriteStory(t.id),!1):(await this.storyDatabase.saveFavoriteStory(t),!0)}catch(r){throw new Error("Failed to toggle favorite: "+r.message)}}async getOfflineStories(){try{return await this.storyDatabase.getOfflineStories()}catch(t){throw new Error("Failed to get offline stories: "+t.message)}}async deleteOfflineStory(t){try{return await this.storyDatabase.deleteOfflineStory(t)}catch(r){throw new Error("Failed to delete offline story: "+r.message)}}}export{y as StoryModel};
